{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["StatusKeys","StatusColors","speed","stamina","power","sprit","intelligence","KnownRaces","turn","title","grade","location","surface","distance","track","side","fullGate","Actions","races","NumberInput","className","value","onChange","style","display","flexDirection","disabled","onClick","e","delta","preventDefault","stopPropagation","button","Math","max","flexGrow","textAlign","type","min","target","valueAsNumber","StatusInput","status","isPlaceholder","id","Bar","current","previous","sum","color","toString","formatDelta","percent","background","width","overflow","toFixed","findPreviousTurn","turns","index","i","Race","race","colSpan","rowSpan","map","key","predictions","Row","normalized","handleStateChange","copy","slice","bars","reduce","height","isRace","includes","useState","expanded","setExpanded","filter","some","padding","lineHeight","findIndex","x","action","currentTarget","item","initialData","localStorage","getItem","JSON","parse","getLocalStorageJson","App","setNormalized","setTurns","handleTurnsChange","setItem","stringify","checked","toUpperCase","substring","Array","from","length","_","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAiBMA,EAA0B,CAAC,QAAS,UAAW,QAAS,QAAS,gBAEjEC,EAA0C,CAC9CC,MAAO,UACPC,QAAS,UACTC,MAAO,UACPC,MAAO,UACPC,aAAc,WAiCVC,EAAqB,CACzB,CACEC,KAAM,GACNC,MAAO,2EACPC,MAAO,QACPC,SAAU,UACVC,QAAS,OACTC,SAAU,IACVC,MAAO,eACPC,KAAM,QACNC,SAAU,IAIRC,EAAU,CAAC,QAAS,UAAW,QAAS,QAAS,eAAgB,OAAQ,WAAY,QAoBrFC,EAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,IAG/B,SAASC,EAAT,GAAiI,IAA1GC,EAAyG,EAAzGA,UAAWC,EAA8F,EAA9FA,MAAOC,EAAuF,EAAvFA,SA2CvC,OACE,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,OAA9C,UACE,wBAAQC,SAAoB,IAAVL,EAAaM,QAxC4B,SAAAC,GAI7D,IAAIC,EACJ,OAJAD,EAAEE,iBACFF,EAAEG,kBAGMH,EAAEI,QACR,KAAK,EACHH,EAAQ,EACR,MACF,KAAK,EACHA,EAAQ,EACR,MACF,QACE,OAGJP,EAASW,KAAKC,IAAIb,EAAQQ,EAAO,KAwB/B,eACA,uBAAOT,UAAWA,EAAWG,MAAO,CAAEY,SAAU,EAAGC,UAAW,UAAYC,KAAK,SAASC,IAAK,EAAGjB,MAAOA,EAAOC,SA7CvD,SAAAM,GAAM,IAAD,EAC9DN,EAAQ,UAACM,EAAEW,OAAOC,qBAAV,QAA2B,MA6CjC,wBAAQb,QAvBkD,SAAAC,GAI5D,IAAIC,EACJ,OAJAD,EAAEE,iBACFF,EAAEG,kBAGMH,EAAEI,QACR,KAAK,EACHH,EAAQ,EACR,MACF,KAAK,EACHA,EAAQ,EACR,MACF,QACE,OAGJP,EAASD,EAAQQ,IAOf,kBAKN,SAASY,EAAT,GAA0K,IAAjIC,EAAgI,EAAhIA,OAAQC,EAAwH,EAAxHA,cAAeC,EAAyG,EAAzGA,GAAItB,EAAqG,EAArGA,SAQlE,OACE,cAACH,EAAD,CACEC,UAAWuB,EAAgB,cAAgB,GAC3CtB,MAAOqB,EAAOE,GACdtB,SAXiB,SAACD,GACpBC,EAAS,2BACJoB,GADG,kBAELE,EAAKvB,QA0BZ,SAASwB,EAAT,GAAuJ,IAAxIC,EAAuI,EAAvIA,QAASC,EAA8H,EAA9HA,SAAUH,EAAoH,EAApHA,GAAII,EAAgH,EAAhHA,IAAKC,EAA2G,EAA3GA,MACnCpB,EAAQkB,EAdhB,SAAqBlB,GACnB,OAAIA,EAAQ,EACHA,EAAMqB,WAED,IAAVrB,EACK,GAELA,EAAQ,EACJ,IAAN,OAAWA,GAEN,GAIkBsB,CAAYL,EAAQF,GAAMG,EAASH,IAAO,GAE7DQ,EAAUN,EAAQF,GAAMI,EAE9B,OACE,sBAAKzB,MAAO,CAAE8B,WAAYJ,EAAOd,SAAUiB,EAASE,MAAO,EAAGC,SAAU,UAAxE,WACc,IAAVH,GAAeI,QAAQ,GAAK,IAC7B3B,KAKP,SAAS4B,EAAiBC,EAAeC,GACvC,IAAK,IAAIC,EAAID,EAAOC,GAAK,EAAGA,GAAK,EAC/B,GAAIF,EAAME,GACR,OAAOF,EAAME,GAQnB,SAASC,EAAT,GAA4D,IAA5CrD,EAA2C,EAA3CA,KAAMsD,EAAqC,EAArCA,KACpB,OACE,qCACE,+BACE,oBAAIC,QAAS,EAAGC,QAAS,IACzB,oBAAID,QAAS,EAAb,SAAiBD,EAAKrD,WAExB,+BACE,4CACCT,EAAWiE,KAAI,SAAAC,GAAG,aACjB,uCAAe1D,EAAK2D,YAAYL,EAAKrD,cAArC,aAAe,EAA+ByD,IAArCA,YAOnB,SAASE,EAAT,GAAkJ,IAC5ItB,EACAH,EAFSe,EAAkI,EAAlIA,MAAOW,EAA2H,EAA3HA,WAAYV,EAA+G,EAA/GA,MAAOrC,EAAwG,EAAxGA,SAGnCoC,EAAMC,IACRb,EAAUY,EAAMC,GAChBhB,GAAgB,IAEhBG,EAAUW,EAAiBC,EAAOC,GAClChB,GAAgB,GAGlB,IAAM2B,EAAoB,SAACjD,GACzB,IAAMkD,EAAOb,EAAMc,QACnBD,EAAKZ,GAAStC,EACdC,EAASiD,IAGPP,EAAU,EACVS,EAA2B,KAC/B,IAAK9B,EAAe,CAClB,IAAIK,EAAMhD,EAAW0E,QAAO,SAACrD,EAAO6C,GAAR,OAAgB7C,EAAQyB,EAAQoB,KAAM,GAClE,GAAY,IAARlB,EAAW,CACb,IAAMD,EAAWU,EAAiBC,EAAOC,EAAQ,GAUjD,GATAc,EACE,qBAAKlD,MAAO,CAAEC,QAAS,OAAQC,cAAe,MAAOkD,OAAQ,IAA7D,SACG3E,EAAWiE,KAAI,SAAAC,GAAG,OACjB,cAACrB,EAAD,CAAKC,QAASA,EAASC,SAAUA,EAAUH,GAAIsB,EAAKlB,IAAKA,EAAKC,MAAOhD,EAAaiE,UAIxFF,GAAW,GAENK,EAAY,CACf,IADe,EACXnC,EAAM,EADK,cAEIwB,GAFJ,yBAEJlD,EAFI,QAGb,IAAKA,EACH,iBAGF,IAAIwC,EAAMhD,EAAW0E,QAAO,SAACrD,EAAO6C,GAAR,OAAgB7C,EAAQb,EAAK0D,KAAM,GAC3DlB,EAAMd,IACRA,EAAMc,IAPV,2BAA0B,IAFX,8BAafyB,EACE,qBAAKlD,MAAO,CAAE+B,MAAQN,EAAMd,EAAO,IAAM,KAAzC,SACGuC,IAKPA,EACE,6BACE,oBAAIV,QAAS,EAAb,SACGU,OAOX,IAAMG,EAAS1D,EAAM2D,SAASlB,GA9DiH,EAgE/GmB,oBAAS,GAhEsG,mBAgExIC,EAhEwI,KAgE9HC,EAhE8H,KAqE3IlB,EAA6B,KAOjC,OANIiB,IACFjB,EAAOvD,EAAW0E,QAAO,SAAAnB,GAAI,OAAIA,EAAKtD,OAASmD,KAAOM,KAAI,SAAAH,GAAI,OAC5D,cAACD,EAAD,CAAuBrD,KAAMsC,EAASgB,KAAMA,GAAjCA,EAAKrD,WAKlB,qCACE,+BACE,oBAAIuD,QAASA,EAAb,SACGzD,EAAW2E,MAAK,SAAApB,GAAI,OAAIA,EAAKtD,OAASmD,MACrC,wBAAQpC,MAAO,CAAE+B,MAAO,GAAIqB,OAAQ,GAAIQ,QAAS,EAAG/C,UAAW,SAAUgD,WAAY,QAAUzD,QAhBzC,SAAAC,GAC9DoD,GAAY,SAAA3D,GAAK,OAAKA,MAed,SAA4H0D,EAAW,IAAM,QAGjJ,oBAAIf,QAASA,EAAb,SAAuBL,IACvB,oBAAIK,QAASA,EAAb,SAAuB9C,EAAMA,EAAMmE,WAAU,SAAAC,GAAC,OAAIA,GAAK3B,MAAUA,IACjE,oBAAIK,QAASA,EAAb,SACa,IAAVL,GACC,yBACEjC,SAAUR,EAAM2D,SAASlB,GACzBtC,MAAOuD,EAAS,OAASjC,EAAgB,GAAKG,EAAQyC,OACtDjE,SAAU,SAAAM,GAAC,OAAI0C,EAAkB,2BAAKxB,GAAN,IAAeyC,OAAQ3D,EAAE4D,cAAcnE,UAHzE,UAKE,wBAAQK,UAAQ,EAACL,MAAM,KACtBJ,EAAQgD,KAAI,SAAAwB,GAAI,OACf,wBAAmBpE,MAAOoE,EAA1B,SAAiCA,GAApBA,WAKpBzF,EAAWiE,KAAI,SAAAC,GAAG,OACjB,6BACE,cAACzB,EAAD,CAAaC,OAAQI,EAASH,cAAeA,EAAeC,GAAIsB,EAAK5C,SAAUgD,YAIpFG,EACAX,KAaP,IAAM4B,EAAmB,UARzB,SAAgCxB,GAC9B,IAAI7C,EAAQsE,aAAaC,QAAQ1B,GACjC,GAAK7C,EAGL,OAAOwE,KAAKC,MAAMzE,GAGQ0E,CAA4B,iBAA/B,QAA4C,CAAC,CACpER,OAAQ,UACRrF,MAAO,EACPC,QAAS,EACTC,MAAO,EACPC,MAAO,EACPC,aAAc,EACd6D,YAAa,KAyCA6B,MAtCf,WAAgB,IAAD,EACuBlB,oBAAS,GADhC,mBACNT,EADM,KACM4B,EADN,OAEanB,mBAASY,GAFtB,mBAENhC,EAFM,KAECwC,EAFD,KAIPC,EAAoB,SAACzD,GACzBiD,aAAaS,QAAQ,SAAUP,KAAKQ,UAAU3D,IAC9CwD,EAASxD,IAGX,OACE,sBAAKtB,UAAU,MAAf,UACE,kCACE,uBAAOiB,KAAK,WAAWiE,QAASjC,EAAY/C,SAAU,SAAAM,GAAC,OAAIqE,EAAcrE,EAAE4D,cAAcc,YACzF,gDAGF,kCACE,gCACE,+BACE,uBACA,sCACA,2CACA,wCACCtG,EAAWiE,KAAI,SAAAC,GAAG,OACjB,6BAAKA,EAAI,GAAGqC,cAAgBrC,EAAIsC,UAAU,aAIhD,gCACGC,MAAMC,KAAK,CAAEC,OA5RL,KA4R2B,SAACC,EAAGhD,GAAJ,OAClC,cAACQ,EAAD,CAAaV,MAAOA,EAAOC,MAAOC,EAAGS,WAAYA,EAAY/C,SAAU6E,GAA7DvC,eC3WPiD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4d9b523d.chunk.js","sourcesContent":["import { ChangeEventHandler, MouseEventHandler, useState } from \"react\";\nimport './App.css';\n\ninterface Status {\n  speed: number;\n\n  stamina: number;\n\n  power: number;\n\n  sprit: number;\n\n  intelligence: number;\n}\n\ntype StatusKey = keyof Status;\n\nconst StatusKeys: StatusKey[] = ['speed', 'stamina', 'power', 'sprit', 'intelligence'];\n\nconst StatusColors: Record<StatusKey, string> = {\n  speed: '#58aef8',\n  stamina: '#ee7b67',\n  power: '#f2a940',\n  sprit: '#ee82a9',\n  intelligence: '#55bc81',\n};\n\ntype Location = 'Kyoto' | 'Tokyo' | 'Nakayama' | 'Hanshin';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst TrackName: Record<Location, string> = {\n  Kyoto: '京都',\n  Tokyo: '東京',\n  Nakayama: '中山',\n  Hanshin: '阪神',\n};\n\ntype Grade = 'Debut' | 'GI' | 'GII' | 'GIII';\n\ntype Surface = 'turf' | 'dirt';\n\ntype Track = 'left-handled' | 'right-handed';\n\ntype Side = 'inner' | 'outer' | 'full';\n\ninterface Race {\n  turn: number;\n  title: string;\n  grade: Grade;\n  location: Location;\n  surface: Surface;\n  distance: number;\n  track: Track;\n  side: Side;\n  fullGate: number;\n}\n\nconst KnownRaces: Race[] = [\n  {\n    turn: 12,\n    title: 'ジュニア級メイクデビュー',\n    grade: 'Debut',\n    location: 'Hanshin',\n    surface: 'turf',\n    distance: 2000,\n    track: 'right-handed',\n    side: 'inner',\n    fullGate: 9,\n  },\n];\n\nconst Actions = ['Speed', 'Stamina', 'Power', 'Sprit', 'Intelligence', 'Rest', 'Hospital', 'Race'];\ntype Action = typeof Actions[number];\n\ntype Prediction = 'triangle' | 'black-triangle' | 'circle' | 'double-circle';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst PredictionMarks: Record<Prediction, string> = {\n  triangle: '△',\n  \"black-triangle\": '▲',\n  circle: '○',\n  \"double-circle\": '◎',\n};\n\n\ninterface Turn extends Status {\n  action: Action;\n\n  predictions: Record<string, Record<StatusKey, Prediction>>;\n}\n\nconst races = [12, 27, 34, 44, 56];\nconst totalTurns = 58;\n\nfunction NumberInput({ className, value, onChange }: { className?: string, value: number, onChange: (value: number) => void; }) {\n  const handleChange: ChangeEventHandler<HTMLInputElement> = e => {\n    onChange(e.target.valueAsNumber ?? 0);\n  };\n\n  const handleMinusClick: MouseEventHandler<HTMLButtonElement> = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    let delta: number;\n    switch (e.button) {\n      case 0:\n        delta = 1;\n        break;\n      case 1:\n        delta = 5;\n        break;\n      default:\n        return;\n    }\n\n    onChange(Math.max(value - delta, 0));\n  };\n\n  const handlePlusClick: MouseEventHandler<HTMLButtonElement> = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    let delta: number;\n    switch (e.button) {\n      case 0:\n        delta = 1;\n        break;\n      case 1:\n        delta = 5;\n        break;\n      default:\n        return;\n    }\n\n    onChange(value + delta);\n  };\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'row' }}>\n      <button disabled={value === 0} onClick={handleMinusClick} >-</button>\n      <input className={className} style={{ flexGrow: 1, textAlign: 'center' }} type=\"number\" min={0} value={value} onChange={handleChange} />\n      <button onClick={handlePlusClick}>+</button>\n    </div>\n  );\n}\n\nfunction StatusInput<T extends Status>({ status, isPlaceholder, id, onChange }: { status: T, isPlaceholder: boolean, id: keyof Status, onChange: (status: T) => void; }) {\n  const handleChange = (value: number) => {\n    onChange({\n      ...status,\n      [id]: value,\n    });\n  };\n\n  return (\n    <NumberInput\n      className={isPlaceholder ? 'placeholder' : ''}\n      value={status[id]}\n      onChange={handleChange}\n    />\n  );\n}\n\nfunction formatDelta(delta: number): string {\n  if (delta < 0) {\n    return delta.toString();\n  }\n  if (delta === 0) {\n    return '';\n  }\n  if (delta > 0) {\n    return `+${delta}`;\n  }\n  return '';\n}\n\nfunction Bar({ current, previous, id, sum, color }: { current: Status, previous: Status | undefined, id: keyof Status, sum: number, color: string, }) {\n  const delta = previous ? formatDelta(current[id] - previous[id]) : '';\n\n  const percent = current[id] / sum;\n\n  return (\n    <div style={{ background: color, flexGrow: percent, width: 0, overflow: 'hidden' }}>\n      {(percent * 100).toFixed(2) + '%'}\n      {delta}\n    </div>\n  );\n}\n\nfunction findPreviousTurn(turns: Turn[], index: number) {\n  for (let i = index; i >= 0; i -= 1) {\n    if (turns[i]) {\n      return turns[i];\n\n    }\n  }\n  return undefined;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nfunction Race({ turn, race }: { turn: Turn, race: Race; }) {\n  return (\n    <>\n      <tr>\n        <td colSpan={3} rowSpan={2} />\n        <td colSpan={6}>{race.title}</td>\n      </tr>\n      <tr>\n        <td>Prediction</td>\n        {StatusKeys.map(key => (\n          <td key={key}>{turn.predictions[race.title]?.[key]}</td>\n        ))}\n      </tr>\n    </>\n  );\n}\n\nfunction Row({ turns, normalized, index, onChange }: { turns: Turn[], normalized: boolean, index: number, onChange: (status: Turn[]) => void; }) {\n  let current!: Turn;\n  let isPlaceholder!: boolean;\n  if (turns[index]) {\n    current = turns[index];\n    isPlaceholder = false;\n  } else {\n    current = findPreviousTurn(turns, index)!;\n    isPlaceholder = true;\n  }\n\n  const handleStateChange = (value: Turn) => {\n    const copy = turns.slice();\n    copy[index] = value;\n    onChange(copy);\n  };\n\n  let rowSpan = 1;\n  let bars: JSX.Element | null = null;\n  if (!isPlaceholder) {\n    let sum = StatusKeys.reduce((value, key) => value + current[key], 0);\n    if (sum !== 0) {\n      const previous = findPreviousTurn(turns, index - 1)!;\n      bars = (\n        <div style={{ display: 'flex', flexDirection: 'row', height: 23 }}>\n          {StatusKeys.map(key => (\n            <Bar current={current} previous={previous} id={key} sum={sum} color={StatusColors[key]} />\n          ))}\n        </div >\n      );\n      rowSpan += 1;\n\n      if (!normalized) {\n        let max = 0;\n        for (const turn of turns) {\n          if (!turn) {\n            continue;\n          }\n\n          let sum = StatusKeys.reduce((value, key) => value + turn[key], 0);\n          if (sum > max) {\n            max = sum;\n          }\n        }\n\n        bars = (\n          <div style={{ width: (sum / max) * 100 + '%' }}>\n            {bars}\n          </div>\n        );\n      }\n\n      bars = (\n        <tr>\n          <td colSpan={5}>\n            {bars}\n          </td>\n        </tr>\n      );\n    }\n  }\n\n  const isRace = races.includes(index);\n\n  const [expanded, setExpanded] = useState(false);\n  const handleExpandClick: MouseEventHandler<HTMLButtonElement> = e => {\n    setExpanded(value => !value);\n  };\n\n  let race: JSX.Element[] | null = null;\n  if (expanded) {\n    race = KnownRaces.filter(race => race.turn === index).map(race => (\n      <Race key={race.title} turn={current} race={race} />\n    ));\n  }\n\n  return (\n    <>\n      <tr>\n        <td rowSpan={rowSpan}>\n          {KnownRaces.some(race => race.turn === index) && (\n            <button style={{ width: 20, height: 20, padding: 0, textAlign: 'center', lineHeight: '18px' }} onClick={handleExpandClick}>{expanded ? '-' : '+'}</button>\n          )}\n        </td>\n        <td rowSpan={rowSpan}>{index}</td>\n        <td rowSpan={rowSpan}>{races[races.findIndex(x => x >= index)] - index}</td>\n        <td rowSpan={rowSpan}>\n          {index !== 0 && (\n            <select\n              disabled={races.includes(index)}\n              value={isRace ? 'Race' : isPlaceholder ? '' : current.action}\n              onChange={e => handleStateChange({ ...current, action: e.currentTarget.value })}\n            >\n              <option disabled value=\"\"></option>\n              {Actions.map(item => (\n                <option key={item} value={item}>{item}</option>\n              ))}\n            </select>\n          )}\n        </td>\n        {StatusKeys.map(key => (\n          <td>\n            <StatusInput status={current} isPlaceholder={isPlaceholder} id={key} onChange={handleStateChange} />\n          </td>\n        ))}\n      </tr>\n      {bars}\n      {race}\n    </>\n  );\n}\n\nfunction getLocalStorageJson<T>(key: string): T | undefined {\n  let value = localStorage.getItem(key);\n  if (!value) {\n    return undefined;\n  }\n  return JSON.parse(value) as T;\n}\n\nconst initialData: Turn[] = getLocalStorageJson<Turn[]>('status') ?? [{\n  action: 'Initial' as unknown as Action,\n  speed: 0,\n  stamina: 0,\n  power: 0,\n  sprit: 0,\n  intelligence: 0,\n  predictions: {},\n}];\n\nfunction App() {\n  const [normalized, setNormalized] = useState(false);\n  const [turns, setTurns] = useState(initialData);\n\n  const handleTurnsChange = (status: Turn[]) => {\n    localStorage.setItem('status', JSON.stringify(status));\n    setTurns(status);\n  };\n\n  return (\n    <div className=\"App\">\n      <label>\n        <input type=\"checkbox\" checked={normalized} onChange={e => setNormalized(e.currentTarget.checked)} />\n        <span>Normalize</span>\n      </label>\n\n      <table>\n        <thead>\n          <tr>\n            <td></td>\n            <td>Turn</td>\n            <td>Next race</td>\n            <td>Action</td>\n            {StatusKeys.map(key => (\n              <td>{key[0].toUpperCase() + key.substring(1)}</td>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {Array.from({ length: totalTurns }, (_, i) => (\n            <Row key={i} turns={turns} index={i} normalized={normalized} onChange={handleTurnsChange} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}